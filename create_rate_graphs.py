#usr/bin/python

import linecache
import os
import re
import matplotlib.pyplot as plt

'''
List of Files generated by bro:
conn.log
TCP/UDP/ICMP connections

dce_rpc.log
Distributed Computing Environment/RPC

dhcp.log
DHCP leases

dns.log
All DNS activity

dpd.log
A summary of protocols encountered on non-standard ports

files.log
Summaries of files transferred over the network. 
This information is aggregated from different protocols, including HTTP, FTP, and SMTP.

http.log
A summary of all HTTP requests with their replies.

kerberos.log
Kerberos

mysql.log
MYSQL

ntlm.log
NT LAN Manager (NTLM)

packet_filter.log
List packet filters that were applied

pe.log
Portable Executable (PE)

radius.log
RADIUS authentication attempts

rfb.log
Remote Framebuffer (RFB)

sip.log

smb_files.log
SMB files

smb_mapping.log
SMB Mapping

smtp.log
SMTP transactions

snmp.log
SNMP messages

ssh.log
SSH Connections

ssl.log
A record of SSL sessions, including certificates being used.

tunnel.log
Tunneling protocol events

weird.log
Unexpected network-level activity

x509.log
X.509 certificate info

'''

file_to_analyse = 'conn.log'


def generate_count_dict(file_name):
    output_dict = dict()
    start_time = 0
    with open(file_name) as file:
        for line in file:
            if '#fields' in line:
                fields = line.split()
                fields.remove("#fields")
                #print fields
            if start_time == 0:
                if re.match('([0-9]{10})', line) is not None:
                    start_time = int(re.match('([0-9]{10})', line).group(0)) - 1
                    output_dict.update({1 : 1})
                    #print start_time
            elif start_time != 0:
                if re.match('([0-9]{10})', line) is not None:
                    if (int(re.match('([0-9]{10})', line).group(0)) - start_time) in output_dict:
                        temp = int(re.match('([0-9]{10})', line).group(0)) - start_time
                        output_dict[temp] = output_dict.get(temp) + 1
                    else:
                        temp = int(re.match('([0-9]{10})',line).group(0)) - start_time
                        output_dict.update({temp: 1})
    return output_dict

out_dict = generate_count_dict(file_to_analyse)

x_axis = []
y_axis = []


for i in sorted(out_dict.keys()):
    x_axis.append(i)
    y_axis.append(out_dict.get(i))



compressed_x_axis = []
compressed_y_axis = []

for i in range(0, len(x_axis)-30, 30):
    temp = 0
    for j in range(0,30):
        temp += y_axis[i+j]
    compressed_x_axis.append(x_axis[i])
    compressed_y_axis.append(temp)

plt.plot(compressed_x_axis, compressed_y_axis, 'b--')

plt.ylabel('No. of Packets')
plt.xlabel('Time in seconds')
plt.title('TCP/UDP packets per second')

plt.show()
